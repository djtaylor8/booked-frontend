type Query {
  info: String!
  feed(filter: String, orderBy: AuditionOrderByInput): Feed!
}

type Feed {
  id: ID!
  auditions: [Audition!]!
  count: Int!
}

type Mutation {
  post(location: String!, description: String!): Audition!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  auditions: [Audition!]!
}

type Audition {
  id: ID!
  description: String!
  location: String!
  createdBy: User
}

type AuthPayload {
  token: String
  user: User 
}

type Subscription {
  newAudition: Audition
}

input AuditionOrderByInput {
  description: Sort
  location: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}